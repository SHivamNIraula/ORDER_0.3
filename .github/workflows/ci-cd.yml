 name: CI/CD Pipeline

 on:
   push:
     branches: [ main, develop ]
   pull_request:
     branches: [ main ]

 jobs:
   test:
     runs-on: ubuntu-latest

     services:
       postgres:
         image: postgres:13
         env:
           POSTGRES_DB: test_restaurant_db
           POSTGRES_USER: test_user
           POSTGRES_PASSWORD: test_password
         options: >-
           --health-cmd pg_isready
           --health-interval 10s
           --health-timeout 5s
           --health-retries 5
         ports:
           - 5432:5432

       redis:
         image: redis:6-alpine
         options: >-
           --health-cmd "redis-cli ping"
           --health-interval 10s
           --health-timeout 5s
           --health-retries 5
         ports:
           - 6379:6379

     steps:
     - uses: actions/checkout@v4

     - name: Set up Python
       uses: actions/setup-python@v4
       with:
         python-version: '3.9'

     - name: Cache pip dependencies
       uses: actions/cache@v3
       with:
         path: ~/.cache/pip
         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
         restore-keys: |
           ${{ runner.os }}-pip-

     - name: Install dependencies
       run: |
         python -m pip install --upgrade pip
         pip install -r requirements.txt
         pip install coverage pytest-django

     - name: Set up environment variables
       run: |
         echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
         echo "DEBUG=True" >> $GITHUB_ENV
         echo "DATABASE_URL=postgres://test_user:test_password@localhost:5432/test_restaurant_db" >> $GITHUB_ENV
         echo "REDIS_URL=redis://localhost:6379" >> $GITHUB_ENV

     - name: Run Django migrations
       run: |
         python manage.py makemigrations
         python manage.py migrate

     - name: Run tests with coverage
       run: |
         coverage run --source='.' manage.py test
         coverage report
         coverage xml

     - name: Upload coverage to Codecov
       uses: codecov/codecov-action@v3
       with:
         file: ./coverage.xml
         flags: unittests
         name: codecov-umbrella
         fail_ci_if_error: false

     - name: Run Django check
       run: python manage.py check

     - name: Check for security issues
       run: |
         pip install bandit
         bandit -r . -f json -o bandit-report.json || true

     - name: Lint with flake8
       run: |
         pip install flake8
         flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
         flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

   deploy-railway:
     needs: test
     runs-on: ubuntu-latest
     if: github.ref == 'refs/heads/main' && github.event_name == 'push'

     steps:
     - uses: actions/checkout@v4

     - name: Deploy to Railway
       uses: railway-app/actions@v1
       with:
         railway-token: ${{ secrets.RAILWAY_TOKEN }}
         service: restaurant-order-system
         environment: production
       env:
         SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
         DEBUG: False
         DATABASE_URL: ${{ secrets.DATABASE_URL }}
         REDIS_URL: ${{ secrets.REDIS_URL }}

   deploy-heroku:
     needs: test
     runs-on: ubuntu-latest
     if: github.ref == 'refs/heads/main' && github.event_name == 'push'

     steps:
     - uses: actions/checkout@v4

     - name: Deploy to Heroku
       uses: akhileshns/heroku-deploy@v3.12.12
       with:
         heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
         heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
         heroku_email: ${{ secrets.HEROKU_EMAIL }}
         usedocker: true
       env:
         HD_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
         HD_DEBUG: False
         HD_DATABASE_URL: ${{ secrets.DATABASE_URL }}
         HD_REDIS_URL: ${{ secrets.REDIS_URL }}
